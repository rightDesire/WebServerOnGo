// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package users

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// MsgResponse defines model for MsgResponse.
type MsgResponse struct {
	Message *string `json:"message,omitempty"`
}

// Task defines model for Task.
type Task struct {
	Id     *uint   `json:"id,omitempty"`
	IsDone *bool   `json:"is_done,omitempty"`
	Task   *string `json:"task,omitempty"`
	UserId *uint   `json:"user_id,omitempty"`
}

// User defines model for User.
type User struct {
	Email    *string `json:"email,omitempty"`
	Id       *uint   `json:"id,omitempty"`
	Password *string `json:"password,omitempty"`
	Tasks    *[]Task `json:"tasks,omitempty"`
}

// PostApiUsersJSONRequestBody defines body for PostApiUsers for application/json ContentType.
type PostApiUsersJSONRequestBody = User

// PatchApiUsersIdJSONRequestBody defines body for PatchApiUsersId for application/json ContentType.
type PatchApiUsersIdJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all users
	// (GET /api/users)
	GetApiUsers(ctx echo.Context) error
	// Create new user
	// (POST /api/users)
	PostApiUsers(ctx echo.Context) error
	// Delete user
	// (DELETE /api/users/{id})
	DeleteApiUsersId(ctx echo.Context, id uint) error
	// Update user
	// (PATCH /api/users/{id})
	PatchApiUsersId(ctx echo.Context, id uint) error
	// Get all tasks for user
	// (GET /api/users/{user-id}/tasks)
	GetApiUsersUserIdTasks(ctx echo.Context, userId uint) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiUsers(ctx)
	return err
}

// PostApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiUsers(ctx)
	return err
}

// DeleteApiUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiUsersId(ctx, id)
	return err
}

// PatchApiUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchApiUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchApiUsersId(ctx, id)
	return err
}

// GetApiUsersUserIdTasks converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiUsersUserIdTasks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId uint

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiUsersUserIdTasks(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/users", wrapper.GetApiUsers)
	router.POST(baseURL+"/api/users", wrapper.PostApiUsers)
	router.DELETE(baseURL+"/api/users/:id", wrapper.DeleteApiUsersId)
	router.PATCH(baseURL+"/api/users/:id", wrapper.PatchApiUsersId)
	router.GET(baseURL+"/api/users/:user-id/tasks", wrapper.GetApiUsersUserIdTasks)

}

type GetApiUsersRequestObject struct {
}

type GetApiUsersResponseObject interface {
	VisitGetApiUsersResponse(w http.ResponseWriter) error
}

type GetApiUsers200JSONResponse []User

func (response GetApiUsers200JSONResponse) VisitGetApiUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiUsersRequestObject struct {
	Body *PostApiUsersJSONRequestBody
}

type PostApiUsersResponseObject interface {
	VisitPostApiUsersResponse(w http.ResponseWriter) error
}

type PostApiUsers201JSONResponse User

func (response PostApiUsers201JSONResponse) VisitPostApiUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiUsersIdRequestObject struct {
	Id uint `json:"id"`
}

type DeleteApiUsersIdResponseObject interface {
	VisitDeleteApiUsersIdResponse(w http.ResponseWriter) error
}

type DeleteApiUsersId204Response struct {
}

func (response DeleteApiUsersId204Response) VisitDeleteApiUsersIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiUsersId404JSONResponse MsgResponse

func (response DeleteApiUsersId404JSONResponse) VisitDeleteApiUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchApiUsersIdRequestObject struct {
	Id   uint `json:"id"`
	Body *PatchApiUsersIdJSONRequestBody
}

type PatchApiUsersIdResponseObject interface {
	VisitPatchApiUsersIdResponse(w http.ResponseWriter) error
}

type PatchApiUsersId200JSONResponse User

func (response PatchApiUsersId200JSONResponse) VisitPatchApiUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchApiUsersId400JSONResponse MsgResponse

func (response PatchApiUsersId400JSONResponse) VisitPatchApiUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchApiUsersId404JSONResponse MsgResponse

func (response PatchApiUsersId404JSONResponse) VisitPatchApiUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetApiUsersUserIdTasksRequestObject struct {
	UserId uint `json:"user-id"`
}

type GetApiUsersUserIdTasksResponseObject interface {
	VisitGetApiUsersUserIdTasksResponse(w http.ResponseWriter) error
}

type GetApiUsersUserIdTasks200JSONResponse User

func (response GetApiUsersUserIdTasks200JSONResponse) VisitGetApiUsersUserIdTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all users
	// (GET /api/users)
	GetApiUsers(ctx context.Context, request GetApiUsersRequestObject) (GetApiUsersResponseObject, error)
	// Create new user
	// (POST /api/users)
	PostApiUsers(ctx context.Context, request PostApiUsersRequestObject) (PostApiUsersResponseObject, error)
	// Delete user
	// (DELETE /api/users/{id})
	DeleteApiUsersId(ctx context.Context, request DeleteApiUsersIdRequestObject) (DeleteApiUsersIdResponseObject, error)
	// Update user
	// (PATCH /api/users/{id})
	PatchApiUsersId(ctx context.Context, request PatchApiUsersIdRequestObject) (PatchApiUsersIdResponseObject, error)
	// Get all tasks for user
	// (GET /api/users/{user-id}/tasks)
	GetApiUsersUserIdTasks(ctx context.Context, request GetApiUsersUserIdTasksRequestObject) (GetApiUsersUserIdTasksResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApiUsers operation middleware
func (sh *strictHandler) GetApiUsers(ctx echo.Context) error {
	var request GetApiUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiUsers(ctx.Request().Context(), request.(GetApiUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiUsersResponseObject); ok {
		return validResponse.VisitGetApiUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiUsers operation middleware
func (sh *strictHandler) PostApiUsers(ctx echo.Context) error {
	var request PostApiUsersRequestObject

	var body PostApiUsersJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiUsers(ctx.Request().Context(), request.(PostApiUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiUsersResponseObject); ok {
		return validResponse.VisitPostApiUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteApiUsersId operation middleware
func (sh *strictHandler) DeleteApiUsersId(ctx echo.Context, id uint) error {
	var request DeleteApiUsersIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiUsersId(ctx.Request().Context(), request.(DeleteApiUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiUsersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteApiUsersIdResponseObject); ok {
		return validResponse.VisitDeleteApiUsersIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchApiUsersId operation middleware
func (sh *strictHandler) PatchApiUsersId(ctx echo.Context, id uint) error {
	var request PatchApiUsersIdRequestObject

	request.Id = id

	var body PatchApiUsersIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchApiUsersId(ctx.Request().Context(), request.(PatchApiUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchApiUsersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchApiUsersIdResponseObject); ok {
		return validResponse.VisitPatchApiUsersIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiUsersUserIdTasks operation middleware
func (sh *strictHandler) GetApiUsersUserIdTasks(ctx echo.Context, userId uint) error {
	var request GetApiUsersUserIdTasksRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiUsersUserIdTasks(ctx.Request().Context(), request.(GetApiUsersUserIdTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiUsersUserIdTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiUsersUserIdTasksResponseObject); ok {
		return validResponse.VisitGetApiUsersUserIdTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
